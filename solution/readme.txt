1. Cвои дампы в git-репозитории не привожу.
1.1. Заходим на сайт http://educaltai.ru/ и дожидаемся полной загрузки сайта.
Выделяем нужный поток командой навроде:
	tshark -F pcap -r /tmp/wireshark_igb0.pcapng -w /tmp/http.pcap -R "tcp.stream eq 1" -2

1.2. Заходим на сайт https://www.e1.ru/ и набираем нужный размер дампа тыкая ссылки с новостями.
Если прилетит RST-пакет, начинаем заново.

2. Целевой файл ftp://ftp.alta.ru/packets/distr/svhpro.zip:
 - Сначала c помощью утилиты dig определяем ip-адрес хоста ftp.alta.ru:
	$ dig ftp.alta.ru +short
	195.191.36.170
 - Запускаем утилиту tcpdump для записи дампа c полученным ip-адресом:
	$ sudo tcpdump -w /tmp/svhpro.zip.pcap -n net 195.191.36.170
 - В отдельной вкладке или окне терминала скачиваем файл используя утилиту wget:
	$ wget -P /tmp ftp://ftp.alta.ru/packets/distr/svhpro.zip
 - Дождавшись скачивания файла прерываем работу запущенной в другой вкладке
или окне терминала утилиты tcpdump сочетанием клавиш Ctrl+C.
 - Извлекаем содержимое полученного дампа утилитой tcpflow:
	$ sudo tcpflow -r /tmp/svhpro.zip.pcap -o /tmp
 - Из файла report.xml берем имя первого, извлеченного утилитой tcpflow,
файла c помощью утилиты sed:
	$ sed -ne '/filename/{s/.*<filename>\(.*\)<\/filename>.*/\1/p;q;}' /tmp/report.xml
	/tmp/195.191.036.170.60634-010.000.002.015.56432
 - Используя утилиту file убеждаемся, что полученный файл является zip-архивом:
	$ file /tmp/195.191.036.170.60634-010.000.002.015.56432
	/tmp/195.191.036.170.60634-010.000.002.015.56432: Zip archive data, at least v2.0 to extract, compression method=deflate
 - Переименовываем извлеченный файл:
	$ sudo mv /tmp/195.191.036.170.60634-010.000.002.015.56432 /tmp/dump-svhpro.zip
 - Сверяем размеры скачанного и извлеченного из дампа файлов утилитой wc
	$ wc -c /tmp/svhpro.zip
	99916014 /tmp/svhpro.zip
	$ wc -c /tmp/dump-svhpro.zip 
	99916020 /tmp/dump-svhpro.zip
 - Если размер файла полученного из дампа меньше оригинального,
значит он гарантировано поврежден и дальнейшая проверка не имеет смысла,
если же размер файла полученного из дампа по какой-то причине больше на 6 и более байт(Данная проблема воспроизводилась на Ubuntu с tcpdump версии 3.99.1)
уменьшаем его размер до размера скачанного файла утилитой truncate:
	$ sudo truncate -r /tmp/svhpro.zip /tmp/dump-svhpro.zip
 - Сверяем хэшсуммы скачанного и извлеченного из дампа файлов используя утилиту sha512sum,
чтобы убедиться, что файлы идентичны:
	$ sha512sum /tmp/svhpro.zip
	fcd40eba873b0212c0e6d9857538f52cd43d1b1e07be919266e2f0742ec70c75de8d62c9e08bdbfde15b34363e571b37df7edf327117fd4bb557be81049bbba7  /tmp/svhpro.zip
	$ sha512sum /tmp/dump-svhpro.zip
	fcd40eba873b0212c0e6d9857538f52cd43d1b1e07be919266e2f0742ec70c75de8d62c9e08bdbfde15b34363e571b37df7edf327117fd4bb557be81049bbba7  /tmp/dump-svhpro.zip
 - Проверяем целостность файла полученного из дампа утилитой unzip:
	$ unzip -t  /tmp/dump-svhpro.zip

3. См. скрипт sniff-zip.sh в прикреплении.
Скрипт принимает в качестве параметров url и пароль от архива.
Скрипт написан в максимально переносимом стиле, по крайней мере работает на Linux и FreeBSD с любым шеллом(при наличии установленных пакетов wget, bind-tools и unzip)
Пример использования:
	$ sudo  sniff-zip.sh  ftp://ftp.alta.ru/packets/distr/svhpro.zip 12345

ПРИМЕЧАНИЕ: К сожалению, проверить целостность запароленного архива без знания пароля
утилитой unzip нельзя и скрипт останавливает работу
в ожидании ввода пароля для запароленного архива,
но с учетом того, что утилита unzip принимает пароль и для не запароленных архивов,
можно передать скрипту случайный набор символов в качестве пароля
и это будет работать отсеивая запароленные архивы как поврежденные.
